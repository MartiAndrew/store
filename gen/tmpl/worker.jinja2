import asyncio

from loguru import logger
from pydantic import BaseModel

from common.base_workers.base_worker import BatchWorker, Worker

from configuration.clients import BaseWorkerClientsState
from configuration.settings import settings


class {{worker_name.split('_')|map('capitalize')|join}}Msg(BaseModel):
    """Модель сообщения из кролика."""

    name: str


class {{worker_name.split('_')|map('capitalize')|join}}ClientsState(BaseWorkerClientsState):
    """Сервисы для подключения в воркере."""

    def get_funcs_for_health_check(self):
        """
        Возвращает функции для проверки в health.

        :return: Список функций.
        """
        return []


async def process(message: {{worker_name.split('_')|map('capitalize')|join}}Msg, clients: {{worker_name.split('_')|map('capitalize')|join}}ClientsState):
    """
    Обработка сообщения из кролика.

    :param message: Сообщение из кролика.
    :param clients: Подключенные клиенты (БД, редис, etc)
    """
    logger.info(f"read {message.name}")


# async def process_batch(messages: list[{{worker_name.split('_')|map('capitalize')|join}}Msg], clients: {{worker_name.split('_')|map('capitalize')|join}}ClientsState):
#     """
#     Пакетная обработка сообщения из кролика.
#
#     :param message: Сообщение из кролика.
#     :param clients: Подключенные клиенты (БД, редис, etc)
#     """
#     logger.info(f"read {[message.name for message in messages]}")


def get_worker():
    """
    Фабрика для создания воркера.

    :return: воркер.
    """
    return Worker(
        message_class={{worker_name.split('_')|map('capitalize')|join}}Msg,
        clients_state_class={{worker_name.split('_')|map('capitalize')|join}}ClientsState,
        callback=process,
        queue_name=settings.{{ worker_name }}.queue_name,
        routing_key=settings.{{ worker_name }}.routing_key,
        exchange_name=settings.{{ worker_name }}.exchange,
        broker_url=settings.{{ worker_name }}.rabbit.url,
        prefetch_count=settings.{{ worker_name }}.prefetch_count,
        metrics_host=settings.{{ worker_name }}.metrics_host,
        metrics_port=settings.{{ worker_name }}.metrics_port,
        health_host=settings.{{ worker_name }}.health_host,
        health_port=settings.{{ worker_name }}.health_port,
        enable_health_check=settings.{{ worker_name }}.enable_health_check,
        is_queue_durable=settings.{{ worker_name }}.is_queue_durable,
        is_exchange_durable=settings.{{ worker_name }}.is_exchange_durable,
        is_vector=False,
    )


async def main():
    """Основная функция запуска воркера sleep_worker."""
    worker = get_worker()
    await worker.run()


if __name__ == "__main__":
    asyncio.run(main())
